System.define("Slipe.MTADefinitions.MTAClient", {
	PlaySoundFrontEnd = playSoundFrontEnd,
	CreateBlip = function(...) local results = {createBlip(...)} if results[1] == false then return end return unpack(results) end,
	CreateBlipAttachedTo = function(...) local results = {createBlipAttachedTo(...)} if results[1] == false then return end return unpack(results) end,
	GetCameraInterior = function(...) local results = {getCameraInterior(...)} if results[1] == false then return end return unpack(results) end,
	GetCameraMatrix = function(...) return System.tuple(getCameraMatrix(...)) end,
	FadeCamera = fadeCamera,
	SetCameraInterior = setCameraInterior,
	GetCameraTarget = function(...) local results = {getCameraTarget(...)} if results[1] == false then return end return unpack(results) end,
	SetCameraMatrix = setCameraMatrix,
	SetCameraTarget = setCameraTarget,
	IsCursorShowing = isCursorShowing,
	ShowCursor = showCursor,
	GetElementsByType = function(...) local results = {getElementsByType(...)} if results[1] == false then return end return unpack(results) end,
	CancelEvent = cancelEvent,
	CancelLatentEvent = cancelLatentEvent,
	GetLatentEventHandles = function(...) local results = {getLatentEventHandles(...)} if results[1] == false then return end return unpack(results) end,
	GetLatentEventStatus = function(...) local results = {getLatentEventStatus(...)} if results[1] == false then return end return unpack(results) end,
	CreateExplosion = createExplosion,
	BindKey = bindKey,
	AddCommandHandler = addCommandHandler,
	GetFunctionsBoundToKey = function(...) local results = {getFunctionsBoundToKey(...)} if results[1] == false then return end return unpack(results) end,
	ExecuteCommandHandler = executeCommandHandler,
	GetKeyBoundToFunction = function(...) local results = {getKeyBoundToFunction(...)} if results[1] == false then return end return unpack(results) end,
	IsControlEnabled = isControlEnabled,
	ToggleControl = toggleControl,
	ToggleAllControls = toggleAllControls,
	UnbindKey = unbindKey,
	CreateMarker = function(...) local results = {createMarker(...)} if results[1] == false then return end return unpack(results) end,
	OutputChatBox = outputChatBox,
	OutputConsole = outputConsole,
	ClearChatBox = clearChatBox,
	ShowChat = showChat,
	CreatePed = function(...) local results = {createPed(...)} if results[1] == false then return end return unpack(results) end,
	ForcePlayerMap = forcePlayerMap,
	GetPlayerBlurLevel = function(...) local results = {getPlayerBlurLevel(...)} if results[1] == false then return end return unpack(results) end,
	GetPlayerMoney = function(...) local results = {getPlayerMoney(...)} if results[1] == false then return end return unpack(results) end,
	GetPlayerWantedLevel = function(...) local results = {getPlayerWantedLevel(...)} if results[1] == false then return end return unpack(results) end,
	GivePlayerMoney = givePlayerMoney,
	IsPlayerMapForced = isPlayerMapForced,
	SetPlayerMoney = setPlayerMoney,
	SetPlayerHudComponentVisible = setPlayerHudComponentVisible,
	SetPlayerBlurLevel = setPlayerBlurLevel,
	TakePlayerMoney = takePlayerMoney,
	DetonateSatchels = detonateSatchels,
	GetNetworkStats = function(...) local results = {getNetworkStats(...)} if results[1] == false then return end return unpack(results) end,
	BlowVehicle = blowVehicle,
	GetRadioChannelName = function(...) local results = {getRadioChannelName(...)} if results[1] == false then return end return unpack(results) end,
	GetRadioChannel = function(...) local results = {getRadioChannel(...)} if results[1] == false then return end return unpack(results) end,
	GetSFXStatus = getSFXStatus,
	GetSoundBPM = function(...) local results = {getSoundBPM(...)} if results[1] == false then return end return unpack(results) end,
	GetSoundBufferLength = function(...) local results = {getSoundBufferLength(...)} if results[1] == false then return end return unpack(results) end,
	GetSoundLength = function(...) local results = {getSoundLength(...)} if results[1] == false then return end return unpack(results) end,
	GetSoundFFTData = function(...) local results = {getSoundFFTData(...)} if results[1] == false then return end return unpack(results) end,
	GetSoundEffects = function(...) local results = {getSoundEffects(...)} if results[1] == false then return end return unpack(results) end,
	GetSoundLevelData = function(...) return System.tuple(getSoundLevelData(...)) end,
	GetSoundMaxDistance = function(...) local results = {getSoundMaxDistance(...)} if results[1] == false then return end return unpack(results) end,
	GetSoundMinDistance = function(...) local results = {getSoundMinDistance(...)} if results[1] == false then return end return unpack(results) end,
	GetSoundMetaTags = function(...) local results = {getSoundMetaTags(...)} if results[1] == false then return end return unpack(results) end,
	GetSoundPosition = function(...) local results = {getSoundPosition(...)} if results[1] == false then return end return unpack(results) end,
	GetSoundPan = function(...) local results = {getSoundPan(...)} if results[1] == false then return end return unpack(results) end,
	GetSoundVolume = function(...) local results = {getSoundVolume(...)} if results[1] == false then return end return unpack(results) end,
	GetSoundProperties = function(...) return System.tuple(getSoundProperties(...)) end,
	GetSoundSpeed = function(...) local results = {getSoundSpeed(...)} if results[1] == false then return end return unpack(results) end,
	GetSoundWaveData = function(...) local results = {getSoundWaveData(...)} if results[1] == false then return end return unpack(results) end,
	IsSoundPanningEnabled = isSoundPanningEnabled,
	PlaySound = function(...) local results = {playSound(...)} if results[1] == false then return end return unpack(results) end,
	PlaySound3D = function(...) local results = {playSound3D(...)} if results[1] == false then return end return unpack(results) end,
	IsSoundPaused = isSoundPaused,
	PlaySFX3D = function(...) local results = {playSFX3D(...)} if results[1] == false then return end return unpack(results) end,
	SetSoundMinDistance = setSoundMinDistance,
	PlaySFX = function(...) local results = {playSFX(...)} if results[1] == false then return end return unpack(results) end,
	SetSoundEffectEnabled = setSoundEffectEnabled,
	SetSoundPan = setSoundPan,
	SetSoundMaxDistance = setSoundMaxDistance,
	SetSoundPanningEnabled = setSoundPanningEnabled,
	SetSoundProperties = setSoundProperties,
	SetRadioChannel = setRadioChannel,
	SetSoundPosition = setSoundPosition,
	SetSoundSpeed = setSoundSpeed,
	SetSoundVolume = setSoundVolume,
	StopSound = stopSound,
	SetSoundPaused = setSoundPaused,
	CanBrowserNavigateBack = canBrowserNavigateBack,
	CanBrowserNavigateForward = canBrowserNavigateForward,
	CreateBrowser = function(...) local results = {createBrowser(...)} if results[1] == false then return end return unpack(results) end,
	GetBrowserSettings = function(...) local results = {getBrowserSettings(...)} if results[1] == false then return end return unpack(results) end,
	GetBrowserProperty = getBrowserProperty,
	ExecuteBrowserJavascript = executeBrowserJavascript,
	FocusBrowser = focusBrowser,
	GetBrowserTitle = function(...) local results = {getBrowserTitle(...)} if results[1] == false then return end return unpack(results) end,
	GetBrowserSource = getBrowserSource,
	InjectBrowserMouseDown = injectBrowserMouseDown,
	GetBrowserURL = function(...) local results = {getBrowserURL(...)} if results[1] == false then return end return unpack(results) end,
	InjectBrowserMouseMove = injectBrowserMouseMove,
	InjectBrowserMouseWheel = injectBrowserMouseWheel,
	IsBrowserFocused = isBrowserFocused,
	IsBrowserDomainBlocked = isBrowserDomainBlocked,
	NavigateBrowserForward = navigateBrowserForward,
	InjectBrowserMouseUp = injectBrowserMouseUp,
	LoadBrowserURL = loadBrowserURL,
	ResizeBrowser = resizeBrowser,
	NavigateBrowserBack = navigateBrowserBack,
	SetBrowserProperty = setBrowserProperty,
	SetBrowserAjaxHandler = setBrowserAjaxHandler,
	ReloadBrowserPage = reloadBrowserPage,
	IsBrowserLoading = isBrowserLoading,
	SetBrowserRenderingPaused = setBrowserRenderingPaused,
	RequestBrowserDomains = function(domains, url, callback) requestBrowserDomains(domains, url, function (wasAccepted) callback(wasAccepted, domains) end) end,
	SetBrowserVolume = setBrowserVolume,
	GuiCreateBrowser = function(...) local results = {guiCreateBrowser(...)} if results[1] == false then return end return unpack(results) end,
	ToggleBrowserDevTools = toggleBrowserDevTools,
	GetCameraClip = function(...) return System.tuple(getCameraClip(...)) end,
	GetCameraGoggleEffect = function(...) local results = {getCameraGoggleEffect(...)} if results[1] == false then return end return unpack(results) end,
	GuiGetBrowser = function(...) local results = {guiGetBrowser(...)} if results[1] == false then return end return unpack(results) end,
	GetCamera = function(...) local results = {getCamera(...)} if results[1] == false then return end return unpack(results) end,
	GetCameraFieldOfView = function(...) local results = {getCameraFieldOfView(...)} if results[1] == false then return end return unpack(results) end,
	GetCameraShakeLevel = function(...) local results = {getCameraShakeLevel(...)} if results[1] == false then return end return unpack(results) end,
	GetCameraViewMode = function(...) local results = {getCameraViewMode(...)} if results[1] == false then return end return unpack(results) end,
	SetCameraFieldOfView = setCameraFieldOfView,
	SetCameraGoggleEffect = setCameraGoggleEffect,
	SetCameraShakeLevel = setCameraShakeLevel,
	SetCameraViewMode = setCameraViewMode,
	SetCameraClip = setCameraClip,
	GetCursorPosition = function(...) return System.tuple(getCursorPosition(...)) end,
	GetCursorAlpha = function(...) local results = {getCursorAlpha(...)} if results[1] == false then return end return unpack(results) end,
	SetCursorPosition = setCursorPosition,
	SetCursorAlpha = setCursorAlpha,
	DxConvertPixels = function(...) local results = {dxConvertPixels(...)} if results[1] == false then return end return unpack(results) end,
	DxCreateFont = function(...) local results = {dxCreateFont(...)} if results[1] == false then return end return unpack(results) end,
	DxCreateRenderTarget = function(...) local results = {dxCreateRenderTarget(...)} if results[1] == false then return end return unpack(results) end,
	DxCreateScreenSource = function(...) local results = {dxCreateScreenSource(...)} if results[1] == false then return end return unpack(results) end,
	DxDrawCircle = dxDrawCircle,
	DxCreateShader = function(...) return System.tuple(dxCreateShader(...)) end,
	DxCreateTexture = function(...) local results = {dxCreateTexture(...)} if results[1] == false then return end return unpack(results) end,
	DxDrawImage = dxDrawImage,
	DxDrawImageSection = dxDrawImageSection,
	DxDrawLine = dxDrawLine,
	DxDrawLine3D = dxDrawLine3D,
	DxDrawMaterialLine3D = dxDrawMaterialLine3D,
	DxDrawPrimitive = dxDrawPrimitive,
	DxDrawMaterialSectionLine3D = dxDrawMaterialSectionLine3D,
	DxDrawRectangle = dxDrawRectangle,
	DxDrawMaterialPrimitive = dxDrawMaterialPrimitive,
	DxDrawText = dxDrawText,
	DxGetFontHeight = function(...) local results = {dxGetFontHeight(...)} if results[1] == false then return end return unpack(results) end,
	DxGetPixelsFormat = function(...) local results = {dxGetPixelsFormat(...)} if results[1] == false then return end return unpack(results) end,
	DxGetPixelColor = function(...) return System.tuple(dxGetPixelColor(...)) end,
	DxGetTextWidth = function(...) local results = {dxGetTextWidth(...)} if results[1] == false then return end return unpack(results) end,
	DxGetStatus = function(...) local results = {dxGetStatus(...)} if results[1] == false then return end return unpack(results) end,
	DxGetBlendMode = function(...) local results = {dxGetBlendMode(...)} if results[1] == false then return end return unpack(results) end,
	DxGetPixelsSize = function(...) return System.tuple(dxGetPixelsSize(...)) end,
	DxGetMaterialSize = function(...) return System.tuple(dxGetMaterialSize(...)) end,
	DxSetBlendMode = dxSetBlendMode,
	DxGetTexturePixels = function(...) local results = {dxGetTexturePixels(...)} if results[1] == false then return end return unpack(results) end,
	FxAddBlood = fxAddBlood,
	DxSetAspectRatioAdjustmentEnabled = dxSetAspectRatioAdjustmentEnabled,
	DxSetTestMode = dxSetTestMode,
	DxSetTextureEdge = dxSetTextureEdge,
	FxAddBulletSplash = fxAddBulletSplash,
	DxSetPixelColor = dxSetPixelColor,
	FxAddDebris = fxAddDebris,
	FxAddBulletImpact = fxAddBulletImpact,
	CreateEffect = function(...) local results = {createEffect(...)} if results[1] == false then return end return unpack(results) end,
	DxUpdateScreenSource = dxUpdateScreenSource,
	DxSetShaderValue = dxSetShaderValue,
	DxSetTexturePixels = dxSetTexturePixels,
	DxSetShaderTessellation = dxSetShaderTessellation,
	DxSetRenderTarget = dxSetRenderTarget,
	DxSetShaderTransform = dxSetShaderTransform,
	FxAddTankFire = fxAddTankFire,
	FxAddWood = fxAddWood,
	FxAddFootSplash = fxAddFootSplash,
	FxAddGlass = fxAddGlass,
	FxAddGunshot = fxAddGunshot,
	FxAddPunchImpact = fxAddPunchImpact,
	FxAddTyreBurst = fxAddTyreBurst,
	GetEffectSpeed = function(...) local results = {getEffectSpeed(...)} if results[1] == false then return end return unpack(results) end,
	FxAddWaterSplash = fxAddWaterSplash,
	GetEffectDensity = function(...) local results = {getEffectDensity(...)} if results[1] == false then return end return unpack(results) end,
	FxAddWaterHydrant = fxAddWaterHydrant,
	FxAddSparks = fxAddSparks,
	SetEffectDensity = setEffectDensity,
	SetEffectSpeed = setEffectSpeed,
	GetElementBoundingBox = function(...) return System.tuple(getElementBoundingBox(...)) end,
	GetElementDistanceFromCentreOfMassToBaseOfModel = function(...) local results = {getElementDistanceFromCentreOfMassToBaseOfModel(...)} if results[1] == false then return end return unpack(results) end,
	GetElementRadius = function(...) local results = {getElementRadius(...)} if results[1] == false then return end return unpack(results) end,
	IsElementCollidableWith = isElementCollidableWith,
	IsElementLocal = isElementLocal,
	IsElementOnScreen = isElementOnScreen,
	IsElementStreamedIn = isElementStreamedIn,
	IsElementStreamable = isElementStreamable,
	IsElementSyncer = isElementSyncer,
	IsElementWaitingForGroundToLoad = isElementWaitingForGroundToLoad,
	SetElementCollidableWith = setElementCollidableWith,
	SetElementMatrix = setElementMatrix,
	SetElementStreamable = setElementStreamable,
	EngineGetModelNameFromID = function(...) local results = {engineGetModelNameFromID(...)} if results[1] == false then return end return unpack(results) end,
	EngineGetModelTextureNames = function(...) local results = {engineGetModelTextureNames(...)} if results[1] == false then return end return unpack(results) end,
	EngineGetModelIDFromName = function(...) local results = {engineGetModelIDFromName(...)} if results[1] == false then return end return unpack(results) end,
	EngineApplyShaderToWorldTexture = engineApplyShaderToWorldTexture,
	EngineGetModelLODDistance = function(...) local results = {engineGetModelLODDistance(...)} if results[1] == false then return end return unpack(results) end,
	EngineGetVisibleTextureNames = function(...) local results = {engineGetVisibleTextureNames(...)} if results[1] == false then return end return unpack(results) end,
	EngineImportTXD = engineImportTXD,
	EngineLoadCOL = function(...) local results = {engineLoadCOL(...)} if results[1] == false then return end return unpack(results) end,
	EngineLoadDFF = function(...) local results = {engineLoadDFF(...)} if results[1] == false then return end return unpack(results) end,
	EngineReplaceModel = engineReplaceModel,
	EngineReplaceAnimation = engineReplaceAnimation,
	EngineReplaceCOL = engineReplaceCOL,
	EngineLoadTXD = function(...) local results = {engineLoadTXD(...)} if results[1] == false then return end return unpack(results) end,
	EngineRemoveShaderFromWorldTexture = engineRemoveShaderFromWorldTexture,
	EngineSetAsynchronousLoading = engineSetAsynchronousLoading,
	EngineLoadIFP = function(...) local results = {engineLoadIFP(...)} if results[1] == false then return end return unpack(results) end,
	EngineRestoreAnimation = engineRestoreAnimation,
	EngineRestoreCOL = engineRestoreCOL,
	EngineRestoreModel = engineRestoreModel,
	EngineSetModelLODDistance = engineSetModelLODDistance,
	EngineSetSurfaceProperties = engineSetSurfaceProperties,
	EngineGetSurfaceProperties = function(...) local results = {engineGetSurfaceProperties(...)} if results[1] == false then return end return unpack(results) end,
	EngineResetSurfaceProperties = function(...) local results = {engineResetSurfaceProperties(...)} if results[1] == false then return end return unpack(results) end,
	TriggerLatentServerEvent = triggerLatentServerEvent,
	TriggerServerEvent = triggerServerEvent,
	CreateFire = createFire,
	ExtinguishFire = extinguishFire,
	GuiBringToFront = guiBringToFront,
	GetChatboxLayout = function(...) local results = {getChatboxLayout(...)} if results[1] == false then return end return unpack(results) end,
	GuiCreateFont = function(...) local results = {guiCreateFont(...)} if results[1] == false then return end return unpack(results) end,
	GuiGetCursorType = function(...) local results = {guiGetCursorType(...)} if results[1] == false then return end return unpack(results) end,
	GuiBlur = guiBlur,
	GuiGetAlpha = function(...) local results = {guiGetAlpha(...)} if results[1] == false then return end return unpack(results) end,
	GuiGetEnabled = guiGetEnabled,
	GuiGetFont = function(...) return System.tuple(guiGetFont(...)) end,
	GuiFocus = guiFocus,
	GuiGetInputMode = function(...) local results = {guiGetInputMode(...)} if results[1] == false then return end return unpack(results) end,
	GuiGetPosition = function(...) return System.tuple(guiGetPosition(...)) end,
	GuiGetProperties = function(...) local results = {guiGetProperties(...)} if results[1] == false then return end return unpack(results) end,
	GuiGetInputEnabled = guiGetInputEnabled,
	GuiGetScreenSize = function(...) return System.tuple(guiGetScreenSize(...)) end,
	GuiGetProperty = function(...) local results = {guiGetProperty(...)} if results[1] == false then return end return unpack(results) end,
	GuiSetAlpha = guiSetAlpha,
	GuiSetEnabled = guiSetEnabled,
	GuiSetInputMode = guiSetInputMode,
	GuiSetPosition = guiSetPosition,
	GuiGetText = function(...) local results = {guiGetText(...)} if results[1] == false then return end return unpack(results) end,
	GuiSetSize = guiSetSize,
	GuiSetProperty = guiSetProperty,
	GuiSetFont = guiSetFont,
	GuiGetVisible = guiGetVisible,
	GuiGetSize = function(...) return System.tuple(guiGetSize(...)) end,
	GuiSetVisible = guiSetVisible,
	GuiSetText = guiSetText,
	IsConsoleActive = isConsoleActive,
	IsChatBoxInputActive = isChatBoxInputActive,
	IsDebugViewActive = isDebugViewActive,
	GuiSetInputEnabled = guiSetInputEnabled,
	GuiMoveToBack = guiMoveToBack,
	IsMainMenuActive = isMainMenuActive,
	IsMTAWindowActive = isMTAWindowActive,
	IsTransferBoxActive = isTransferBoxActive,
	SetDebugViewActive = setDebugViewActive,
	GuiCheckBoxGetSelected = guiCheckBoxGetSelected,
	GuiCreateButton = function(...) local results = {guiCreateButton(...)} if results[1] == false then return end return unpack(results) end,
	GuiComboBoxAddItem = function(...) local results = {guiComboBoxAddItem(...)} if results[1] == false then return end return unpack(results) end,
	GuiCreateComboBox = function(...) local results = {guiCreateComboBox(...)} if results[1] == false then return end return unpack(results) end,
	GuiCreateCheckBox = function(...) local results = {guiCreateCheckBox(...)} if results[1] == false then return end return unpack(results) end,
	GuiComboBoxClear = guiComboBoxClear,
	GuiCheckBoxSetSelected = guiCheckBoxSetSelected,
	GuiComboBoxGetItemCount = function(...) local results = {guiComboBoxGetItemCount(...)} if results[1] == false then return end return unpack(results) end,
	GuiComboBoxGetSelected = function(...) local results = {guiComboBoxGetSelected(...)} if results[1] == false then return end return unpack(results) end,
	GuiComboBoxGetItemText = function(...) local results = {guiComboBoxGetItemText(...)} if results[1] == false then return end return unpack(results) end,
	GuiComboBoxRemoveItem = guiComboBoxRemoveItem,
	GuiComboBoxIsOpen = guiComboBoxIsOpen,
	GuiComboBoxSetItemText = guiComboBoxSetItemText,
	GuiComboBoxSetOpen = guiComboBoxSetOpen,
	GuiEditGetMaxLength = function(...) local results = {guiEditGetMaxLength(...)} if results[1] == false then return end return unpack(results) end,
	GuiEditGetCaretIndex = function(...) local results = {guiEditGetCaretIndex(...)} if results[1] == false then return end return unpack(results) end,
	GuiComboBoxSetSelected = guiComboBoxSetSelected,
	GuiEditIsMasked = guiEditIsMasked,
	GuiCreateEdit = function(...) local results = {guiCreateEdit(...)} if results[1] == false then return end return unpack(results) end,
	GuiEditSetReadOnly = guiEditSetReadOnly,
	GuiEditSetMasked = guiEditSetMasked,
	GuiEditIsReadOnly = guiEditIsReadOnly,
	GuiCreateGridList = function(...) local results = {guiCreateGridList(...)} if results[1] == false then return end return unpack(results) end,
	GuiEditSetCaretIndex = guiEditSetCaretIndex,
	GuiEditSetMaxLength = guiEditSetMaxLength,
	GuiGridListAddColumn = function(...) local results = {guiGridListAddColumn(...)} if results[1] == false then return end return unpack(results) end,
	GuiGridListAddRow = function(...) local results = {guiGridListAddRow(...)} if results[1] == false then return end return unpack(results) end,
	GuiGridListAutoSizeColumn = guiGridListAutoSizeColumn,
	GuiGridListClear = guiGridListClear,
	GuiGridListGetItemColor = function(...) return System.tuple(guiGridListGetItemColor(...)) end,
	GuiGridListGetColumnCount = function(...) local results = {guiGridListGetColumnCount(...)} if results[1] == false then return end return unpack(results) end,
	GuiGridListGetColumnTitle = function(...) local results = {guiGridListGetColumnTitle(...)} if results[1] == false then return end return unpack(results) end,
	GuiGridListGetHorizontalScrollPosition = function(...) local results = {guiGridListGetHorizontalScrollPosition(...)} if results[1] == false then return end return unpack(results) end,
	GuiGridListGetColumnWidth = guiGridListGetColumnWidth,
	GuiGridListGetItemData = function(...) local results = {guiGridListGetItemData(...)} if results[1] == false then return end return unpack(results) end,
	GuiGridListGetRowCount = function(...) local results = {guiGridListGetRowCount(...)} if results[1] == false then return end return unpack(results) end,
	GuiGridListGetItemText = function(...) local results = {guiGridListGetItemText(...)} if results[1] == false then return end return unpack(results) end,
	GuiGridListGetSelectedItems = function(...) local results = {guiGridListGetSelectedItems(...)} if results[1] == false then return end return unpack(results) end,
	GuiGridListGetSelectedCount = function(...) local results = {guiGridListGetSelectedCount(...)} if results[1] == false then return end return unpack(results) end,
	GuiGridListGetSelectedItem = function(...) return System.tuple(guiGridListGetSelectedItem(...)) end,
	GuiGridListRemoveColumn = guiGridListRemoveColumn,
	GuiGridListRemoveRow = guiGridListRemoveRow,
	GuiGridListSetItemText = guiGridListSetItemText,
	GuiGridListInsertRowAfter = function(...) local results = {guiGridListInsertRowAfter(...)} if results[1] == false then return end return unpack(results) end,
	GuiGridListSetColumnWidth = guiGridListSetColumnWidth,
	GuiGridListGetVerticalScrollPosition = function(...) local results = {guiGridListGetVerticalScrollPosition(...)} if results[1] == false then return end return unpack(results) end,
	GuiGridListSetColumnTitle = guiGridListSetColumnTitle,
	GuiGridListSetHorizontalScrollPosition = guiGridListSetHorizontalScrollPosition,
	GuiGridListSetSelectedItem = guiGridListSetSelectedItem,
	GuiGridListSetItemColor = guiGridListSetItemColor,
	GuiGridListSetItemData = guiGridListSetItemData,
	GuiGridListSetScrollBars = guiGridListSetScrollBars,
	GuiCreateMemo = function(...) local results = {guiCreateMemo(...)} if results[1] == false then return end return unpack(results) end,
	GuiMemoSetCaretIndex = guiMemoSetCaretIndex,
	GuiMemoIsReadOnly = guiMemoIsReadOnly,
	GuiMemoSetVerticalScrollPosition = guiMemoSetVerticalScrollPosition,
	GuiGridListSetVerticalScrollPosition = guiGridListSetVerticalScrollPosition,
	GuiProgressBarSetProgress = guiProgressBarSetProgress,
	GuiMemoSetReadOnly = guiMemoSetReadOnly,
	GuiGridListSetSortingEnabled = guiGridListSetSortingEnabled,
	GuiGridListSetSelectionMode = guiGridListSetSelectionMode,
	GuiScrollBarGetScrollPosition = function(...) local results = {guiScrollBarGetScrollPosition(...)} if results[1] == false then return end return unpack(results) end,
	GuiMemoGetCaretIndex = function(...) local results = {guiMemoGetCaretIndex(...)} if results[1] == false then return end return unpack(results) end,
	GuiCreateRadioButton = function(...) local results = {guiCreateRadioButton(...)} if results[1] == false then return end return unpack(results) end,
	GuiRadioButtonGetSelected = guiRadioButtonGetSelected,
	GuiMemoGetVerticalScrollPosition = function(...) local results = {guiMemoGetVerticalScrollPosition(...)} if results[1] == false then return end return unpack(results) end,
	GuiCreateScrollBar = function(...) local results = {guiCreateScrollBar(...)} if results[1] == false then return end return unpack(results) end,
	GuiRadioButtonSetSelected = guiRadioButtonSetSelected,
	GuiCreateProgressBar = function(...) local results = {guiCreateProgressBar(...)} if results[1] == false then return end return unpack(results) end,
	GuiProgressBarGetProgress = function(...) local results = {guiProgressBarGetProgress(...)} if results[1] == false then return end return unpack(results) end,
	GuiScrollPaneGetHorizontalScrollPosition = function(...) local results = {guiScrollPaneGetHorizontalScrollPosition(...)} if results[1] == false then return end return unpack(results) end,
	GuiScrollPaneSetHorizontalScrollPosition = guiScrollPaneSetHorizontalScrollPosition,
	GuiScrollPaneSetScrollBars = guiScrollPaneSetScrollBars,
	GuiScrollPaneSetVerticalScrollPosition = guiScrollPaneSetVerticalScrollPosition,
	GuiScrollPaneGetVerticalScrollPosition = function(...) local results = {guiScrollPaneGetVerticalScrollPosition(...)} if results[1] == false then return end return unpack(results) end,
	GuiCreateScrollPane = function(...) local results = {guiCreateScrollPane(...)} if results[1] == false then return end return unpack(results) end,
	GuiSetSelectedTab = guiSetSelectedTab,
	GuiGetSelectedTab = function(...) local results = {guiGetSelectedTab(...)} if results[1] == false then return end return unpack(results) end,
	GuiCreateTabPanel = function(...) local results = {guiCreateTabPanel(...)} if results[1] == false then return end return unpack(results) end,
	GuiCreateStaticImage = function(...) local results = {guiCreateStaticImage(...)} if results[1] == false then return end return unpack(results) end,
	GuiLabelSetHorizontalAlign = guiLabelSetHorizontalAlign,
	GuiCreateTab = function(...) local results = {guiCreateTab(...)} if results[1] == false then return end return unpack(results) end,
	GuiStaticImageLoadImage = guiStaticImageLoadImage,
	GuiStaticImageGetNativeSize = function(...) return System.tuple(guiStaticImageGetNativeSize(...)) end,
	GuiWindowIsMovable = guiWindowIsMovable,
	GuiLabelGetColor = function(...) return System.tuple(guiLabelGetColor(...)) end,
	GuiDeleteTab = guiDeleteTab,
	GetCommandsBoundToKey = function(...) local results = {getCommandsBoundToKey(...)} if results[1] == false then return end return unpack(results) end,
	GuiCreateWindow = function(...) local results = {guiCreateWindow(...)} if results[1] == false then return end return unpack(results) end,
	GuiLabelGetFontHeight = function(...) local results = {guiLabelGetFontHeight(...)} if results[1] == false then return end return unpack(results) end,
	GuiWindowSetMovable = guiWindowSetMovable,
	GuiLabelGetTextExtent = function(...) local results = {guiLabelGetTextExtent(...)} if results[1] == false then return end return unpack(results) end,
	GuiLabelSetVerticalAlign = guiLabelSetVerticalAlign,
	GuiWindowIsSizable = guiWindowIsSizable,
	GuiCreateLabel = function(...) local results = {guiCreateLabel(...)} if results[1] == false then return end return unpack(results) end,
	GetKeyState = getKeyState,
	GetKeyBoundToCommand = function(...) local results = {getKeyBoundToCommand(...)} if results[1] == false then return end return unpack(results) end,
	GetLightType = function(...) local results = {getLightType(...)} if results[1] == false then return end return unpack(results) end,
	GuiWindowSetSizable = guiWindowSetSizable,
	SetLightDirection = setLightDirection,
	GetLightRadius = function(...) local results = {getLightRadius(...)} if results[1] == false then return end return unpack(results) end,
	GetLightDirection = function(...) return System.tuple(getLightDirection(...)) end,
	GetLightColor = function(...) return System.tuple(getLightColor(...)) end,
	CreateLight = function(...) local results = {createLight(...)} if results[1] == false then return end return unpack(results) end,
	SetLightColor = setLightColor,
	SetLightRadius = setLightRadius,
	GetObjectProperty = function(...) local results = {getObjectProperty(...)} if results[1] == false then return end return unpack(results) end,
	SetObjectBreakable = setObjectBreakable,
	GetObjectMass = function(...) local results = {getObjectMass(...)} if results[1] == false then return end return unpack(results) end,
	ToggleObjectRespawn = toggleObjectRespawn,
	IsChatVisible = isChatVisible,
	SetObjectMass = setObjectMass,
	SetObjectProperty = setObjectProperty,
	RespawnObject = respawnObject,
	IsObjectBreakable = isObjectBreakable,
	GuiScrollBarSetScrollPosition = guiScrollBarSetScrollPosition,
	GuiLabelSetColor = guiLabelSetColor,
	GetPedAnimation = function(...) return System.tuple(getPedAnimation(...)) end,
	GetAnalogControlState = function(...) local results = {getAnalogControlState(...)} if results[1] == false then return end return unpack(results) end,
	GetPedControlState = getPedControlState,
	GetBoundKeys = function(...) local results = {getBoundKeys(...)} if results[1] == false then return end return unpack(results) end,
	GetPedAnalogControlState = function(...) local results = {getPedAnalogControlState(...)} if results[1] == false then return end return unpack(results) end,
	GetPedCameraRotation = function(...) local results = {getPedCameraRotation(...)} if results[1] == false then return end return unpack(results) end,
	GetPedMoveState = function(...) local results = {getPedMoveState(...)} if results[1] == false then return end return unpack(results) end,
	GetPedTargetEnd = function(...) return System.tuple(getPedTargetEnd(...)) end,
	GetPedOxygenLevel = function(...) local results = {getPedOxygenLevel(...)} if results[1] == false then return end return unpack(results) end,
	GetPedSimplestTask = function(...) local results = {getPedSimplestTask(...)} if results[1] == false then return end return unpack(results) end,
	GetPedBonePosition = function(...) return System.tuple(getPedBonePosition(...)) end,
	GetPedTargetCollision = function(...) return System.tuple(getPedTargetCollision(...)) end,
	GetPedTask = function(...) return System.tuple(getPedTask(...)) end,
	GetPedTargetStart = function(...) return System.tuple(getPedTargetStart(...)) end,
	GetPedWeaponMuzzlePosition = function(...) return System.tuple(getPedWeaponMuzzlePosition(...)) end,
	GetPedVoice = function(...) return System.tuple(getPedVoice(...)) end,
	BreakObject = breakObject,
	GivePedWeapon = givePedWeapon,
	IsPedDoingTask = isPedDoingTask,
	IsPedReloadingWeapon = isPedReloadingWeapon,
	IsPedTargetingMarkerEnabled = isPedTargetingMarkerEnabled,
	SetAnalogControlState = setAnalogControlState,
	SetPedAnalogControlState = setPedAnalogControlState,
	SetPedAimTarget = setPedAimTarget,
	CanPedBeKnockedOffBike = canPedBeKnockedOffBike,
	SetPedCanBeKnockedOffBike = setPedCanBeKnockedOffBike,
	SetPedCameraRotation = setPedCameraRotation,
	SetPedControlState = setPedControlState,
	SetPedFootBloodEnabled = setPedFootBloodEnabled,
	SetPedLookAt = setPedLookAt,
	SetPedOxygenLevel = setPedOxygenLevel,
	SetPedVoice = setPedVoice,
	SetPedTargetingMarkerEnabled = setPedTargetingMarkerEnabled,
	GetPlayerMapBoundingBox = function(...) return System.tuple(getPlayerMapBoundingBox(...)) end,
	GetLocalPlayer = function(...) local results = {getLocalPlayer(...)} if results[1] == false then return end return unpack(results) end,
	IsPlayerMapVisible = isPlayerMapVisible,
	IsPlayerHudComponentVisible = isPlayerHudComponentVisible,
	GetProjectileCounter = function(...) local results = {getProjectileCounter(...)} if results[1] == false then return end return unpack(results) end,
	GetProjectileCreator = function(...) local results = {getProjectileCreator(...)} if results[1] == false then return end return unpack(results) end,
	GetProjectileForce = function(...) local results = {getProjectileForce(...)} if results[1] == false then return end return unpack(results) end,
	GetProjectileTarget = function(...) local results = {getProjectileTarget(...)} if results[1] == false then return end return unpack(results) end,
	CreateProjectile = function(...) local results = {createProjectile(...)} if results[1] == false then return end return unpack(results) end,
	SetProjectileCounter = setProjectileCounter,
	GetProjectileType = function(...) local results = {getProjectileType(...)} if results[1] == false then return end return unpack(results) end,
	GetSearchLightEndRadius = function(...) local results = {getSearchLightEndRadius(...)} if results[1] == false then return end return unpack(results) end,
	GetSearchLightEndPosition = function(...) return System.tuple(getSearchLightEndPosition(...)) end,
	GetSearchLightStartRadius = function(...) local results = {getSearchLightStartRadius(...)} if results[1] == false then return end return unpack(results) end,
	SetSearchLightEndPosition = function(...) local results = {setSearchLightEndPosition(...)} if results[1] == false then return end return unpack(results) end,
	SetSearchLightStartRadius = function(...) local results = {setSearchLightStartRadius(...)} if results[1] == false then return end return unpack(results) end,
	CreateSearchLight = function(...) local results = {createSearchLight(...)} if results[1] == false then return end return unpack(results) end,
	SetSearchLightEndRadius = function(...) local results = {setSearchLightEndRadius(...)} if results[1] == false then return end return unpack(results) end,
	GetResourceGUIElement = function(...) local results = {getResourceGUIElement(...)} if results[1] == false then return end return unpack(results) end,
	GetSearchLightStartPosition = function(...) local results = {getSearchLightStartPosition(...)} if results[1] == false then return end return unpack(results) end,
	SetSearchLightStartPosition = function(...) local results = {setSearchLightStartPosition(...)} if results[1] == false then return end return unpack(results) end,
	DownloadFile = downloadFile,
	CreateTrayNotification = createTrayNotification,
	GetLocalization = function(...) local results = {getLocalization(...)} if results[1] == false then return end return unpack(results) end,
	IsTrayNotificationEnabled = isTrayNotificationEnabled,
	SetClipboard = setClipboard,
	SetWindowFlashing = setWindowFlashing,
	GetHeliBladeCollisionsEnabled = getHeliBladeCollisionsEnabled,
	GetHelicopterRotorSpeed = function(...) local results = {getHelicopterRotorSpeed(...)} if results[1] == false then return end return unpack(results) end,
	GetVehicleAdjustableProperty = function(...) local results = {getVehicleAdjustableProperty(...)} if results[1] == false then return end return unpack(results) end,
	GetVehicleComponentPosition = function(...) return System.tuple(getVehicleComponentPosition(...)) end,
	GetVehicleComponentVisible = getVehicleComponentVisible,
	GetVehicleComponentRotation = function(...) return System.tuple(getVehicleComponentRotation(...)) end,
	GetVehicleComponents = function(...) local results = {getVehicleComponents(...)} if results[1] == false then return end return unpack(results) end,
	GetVehicleCurrentGear = function(...) local results = {getVehicleCurrentGear(...)} if results[1] == false then return end return unpack(results) end,
	GetVehicleGravity = function(...) return System.tuple(getVehicleGravity(...)) end,
	GetVehicleModelExhaustFumesPosition = function(...) return System.tuple(getVehicleModelExhaustFumesPosition(...)) end,
	GetVehicleNitroCount = function(...) local results = {getVehicleNitroCount(...)} if results[1] == false then return end return unpack(results) end,
	IsTrainChainEngine = isTrainChainEngine,
	IsVehicleNitroActivated = isVehicleNitroActivated,
	IsVehicleNitroRecharging = isVehicleNitroRecharging,
	IsVehicleWindowOpen = isVehicleWindowOpen,
	IsVehicleWheelOnGround = isVehicleWheelOnGround,
	SetHeliBladeCollisionsEnabled = setHeliBladeCollisionsEnabled,
	ResetVehicleComponentPosition = resetVehicleComponentPosition,
	ResetVehicleComponentRotation = resetVehicleComponentRotation,
	SetHelicopterRotorSpeed = setHelicopterRotorSpeed,
	SetVehicleComponentRotation = setVehicleComponentRotation,
	SetVehicleAdjustableProperty = setVehicleAdjustableProperty,
	SetVehicleComponentPosition = setVehicleComponentPosition,
	SetVehicleComponentVisible = setVehicleComponentVisible,
	SetVehicleGravity = setVehicleGravity,
	SetVehicleModelExhaustFumesPosition = setVehicleModelExhaustFumesPosition,
	SetVehicleNitroActivated = setVehicleNitroActivated,
	SetVehicleNitroCount = setVehicleNitroCount,
	SetVehicleNitroLevel = setVehicleNitroLevel,
	GetVehicleNitroLevel = function(...) local results = {getVehicleNitroLevel(...)} if results[1] == false then return end return unpack(results) end,
	SetVehicleWindowOpen = setVehicleWindowOpen,
	GetWaterLevel = function(...) local results = {getWaterLevel(...)} if results[1] == false then return end return unpack(results) end,
	IsWaterDrawnLast = isWaterDrawnLast,
	SetWaterDrawnLast = setWaterDrawnLast,
	CreateWeapon = function(...) local results = {createWeapon(...)} if results[1] == false then return end return unpack(results) end,
	FireWeapon = fireWeapon,
	GetWeaponAmmo = function(...) local results = {getWeaponAmmo(...)} if results[1] == false then return end return unpack(results) end,
	GetWeaponClipAmmo = function(...) local results = {getWeaponClipAmmo(...)} if results[1] == false then return end return unpack(results) end,
	GetWeaponFiringRate = function(...) local results = {getWeaponFiringRate(...)} if results[1] == false then return end return unpack(results) end,
	GetWeaponOwner = getWeaponOwner,
	GetWeaponFlags = getWeaponFlags,
	GetWeaponState = function(...) local results = {getWeaponState(...)} if results[1] == false then return end return unpack(results) end,
	ResetWeaponFiringRate = resetWeaponFiringRate,
	GetWeaponTarget = function(...) local results = {getWeaponTarget(...)} if results[1] == false then return end return unpack(results) end,
	SetWeaponFiringRate = setWeaponFiringRate,
	SetWeaponClipAmmo = setWeaponClipAmmo,
	SetWeaponFlags = setWeaponFlags,
	SetWeaponState = setWeaponState,
	CreateSWATRope = createSWATRope,
	GetBirdsEnabled = getBirdsEnabled,
	GetGarageBoundingBox = function(...) return System.tuple(getGarageBoundingBox(...)) end,
	GetGroundPosition = function(...) local results = {getGroundPosition(...)} if results[1] == false then return end return unpack(results) end,
	GetGarageSize = function(...) return System.tuple(getGarageSize(...)) end,
	GetInteriorFurnitureEnabled = getInteriorFurnitureEnabled,
	GetGaragePosition = function(...) return System.tuple(getGaragePosition(...)) end,
	GetInteriorSoundsEnabled = getInteriorSoundsEnabled,
	GetNearClipDistance = function(...) local results = {getNearClipDistance(...)} if results[1] == false then return end return unpack(results) end,
	ResetPedsLODDistance = resetPedsLODDistance,
	GetPedsLODDistance = function(...) local results = {getPedsLODDistance(...)} if results[1] == false then return end return unpack(results) end,
	SetPedsLODDistance = setPedsLODDistance,
	GetScreenFromWorldPosition = function(...) return System.tuple(getScreenFromWorldPosition(...)) end,
	GetVehiclesLODDistance = function(...) return System.tuple(getVehiclesLODDistance(...)) end,
	GetWorldFromScreenPosition = function(...) return System.tuple(getWorldFromScreenPosition(...)) end,
	IsAmbientSoundEnabled = isAmbientSoundEnabled,
	IsWorldSoundEnabled = isWorldSoundEnabled,
	IsLineOfSightClear = isLineOfSightClear,
	IsWorldSpecialPropertyEnabled = isWorldSpecialPropertyEnabled,
	ResetAmbientSounds = resetAmbientSounds,
	ProcessLineOfSight = function(...) 
 local args = {processLineOfSight(...)}
 local primaryArguments = {}
 local secondaryArguments = {}
 local tertiaryArguments = {}

 for i = 1, 7 do
 primaryArguments[i] = args[i]
 end
 for i = 8, 14 do
 secondaryArguments[i - 7] = args[i]
 end
 for i = 15, #args do
 tertiaryArguments[i - 14] = args[i]
 end
 local tertiaryTuple = System.Tuple(unpack(tertiaryArguments))
 secondaryArguments[8] = tertiaryTuple
 local secondaryTuple = System.Tuple(unpack(secondaryArguments))
 primaryArguments[8] = secondaryTuple

 return System.Tuple(unpack(primaryArguments))
end,
	ResetVehiclesLODDistance = resetVehiclesLODDistance,
	ResetWorldSounds = resetWorldSounds,
	SetAmbientSoundEnabled = setAmbientSoundEnabled,
	SetBirdsEnabled = setBirdsEnabled,
	SetInteriorFurnitureEnabled = setInteriorFurnitureEnabled,
	SetNearClipDistance = setNearClipDistance,
	SetVehiclesLODDistance = setVehiclesLODDistance,
	SetWorldSoundEnabled = setWorldSoundEnabled,
	TestLineAgainstWater = function(...) return System.tuple(testLineAgainstWater(...)) end,
	SetWorldSpecialPropertyEnabled = setWorldSpecialPropertyEnabled,
})
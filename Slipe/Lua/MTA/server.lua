System.define("MultiTheftAuto.Server", {
	GetAccounts = function(...) local results = {getAccounts(...)} if results[1] == false then return end return unpack(results) end,
	GetAccountID = function(...) local results = {getAccountID(...)} if results[1] == false then return end return unpack(results) end,
	LogIn = logIn,
	GetAccountData = function(...) local results = {getAccountData(...)} if results[1] == false then return end return unpack(results) end,
	GetPlayerAccount = function(...) local results = {getPlayerAccount(...)} if results[1] == false then return end return unpack(results) end,
	SetAccountData = setAccountData,
	SetAccountPassword = setAccountPassword,
	GetAccountsByData = function(...) local results = {getAccountsByData(...)} if results[1] == false then return end return unpack(results) end,
	GetAccountByID = function(...) local results = {getAccountByID(...)} if results[1] == false then return end return unpack(results) end,
	GetAccountsBySerial = function(...) local results = {getAccountsBySerial(...)} if results[1] == false then return end return unpack(results) end,
	RemoveAccount = removeAccount,
	GetAccountPlayer = function(...) local results = {getAccountPlayer(...)} if results[1] == false then return end return unpack(results) end,
	AddAccount = function(...) local results = {addAccount(...)} if results[1] == false then return end return unpack(results) end,
	LogOut = logOut,
	GetAllAccountData = function(...) local results = {getAllAccountData(...)} if results[1] == false then return end return unpack(results) end,
	GetAccountName = function(...) local results = {getAccountName(...)} if results[1] == false then return end return unpack(results) end,
	GetAccount = function(...) local results = {getAccount(...)} if results[1] == false then return end return unpack(results) end,
	CopyAccountData = copyAccountData,
	GetAccountsByIP = function(...) local results = {getAccountsByIP(...)} if results[1] == false then return end return unpack(results) end,
	GetAccountIP = function(...) local results = {getAccountIP(...)} if results[1] == false then return end return unpack(results) end,
	AclCreateGroup = function(...) local results = {aclCreateGroup(...)} if results[1] == false then return end return unpack(results) end,
	AclDestroy = aclDestroy,
	SetAccountName = setAccountName,
	AclCreate = function(...) local results = {aclCreate(...)} if results[1] == false then return end return unpack(results) end,
	AclGetGroup = function(...) local results = {aclGetGroup(...)} if results[1] == false then return end return unpack(results) end,
	AclDestroyGroup = aclDestroyGroup,
	AclGetName = function(...) local results = {aclGetName(...)} if results[1] == false then return end return unpack(results) end,
	AclGetRight = aclGetRight,
	AclGet = function(...) local results = {aclGet(...)} if results[1] == false then return end return unpack(results) end,
	AclGroupAddACL = aclGroupAddACL,
	AclGroupListACL = function(...) local results = {aclGroupListACL(...)} if results[1] == false then return end return unpack(results) end,
	AclGroupList = function(...) local results = {aclGroupList(...)} if results[1] == false then return end return unpack(results) end,
	AclGroupGetName = function(...) local results = {aclGroupGetName(...)} if results[1] == false then return end return unpack(results) end,
	AclGroupAddObject = aclGroupAddObject,
	AclGroupListObjects = function(...) local results = {aclGroupListObjects(...)} if results[1] == false then return end return unpack(results) end,
	AclGroupRemoveObject = aclGroupRemoveObject,
	AclGroupRemoveACL = aclGroupRemoveACL,
	AclRemoveRight = aclRemoveRight,
	AclList = function(...) local results = {aclList(...)} if results[1] == false then return end return unpack(results) end,
	AclReload = aclReload,
	AclListRights = function(...) local results = {aclListRights(...)} if results[1] == false then return end return unpack(results) end,
	AclSave = aclSave,
	IsObjectInACLGroup = isObjectInACLGroup,
	AclSetRight = aclSetRight,
	GetBanIP = function(...) local results = {getBanIP(...)} if results[1] == false then return end return unpack(results) end,
	HasObjectPermissionTo = hasObjectPermissionTo,
	GetBanReason = function(...) local results = {getBanReason(...)} if results[1] == false then return end return unpack(results) end,
	GetBanSerial = function(...) local results = {getBanSerial(...)} if results[1] == false then return end return unpack(results) end,
	GetBanTime = function(...) local results = {getBanTime(...)} if results[1] == false then return end return unpack(results) end,
	GetBanAdmin = function(...) local results = {getBanAdmin(...)} if results[1] == false then return end return unpack(results) end,
	IsBan = isBan,
	GetBanUsername = function(...) local results = {getBanUsername(...)} if results[1] == false then return end return unpack(results) end,
	GetUnbanTime = function(...) local results = {getUnbanTime(...)} if results[1] == false then return end return unpack(results) end,
	GetBanNick = function(...) local results = {getBanNick(...)} if results[1] == false then return end return unpack(results) end,
	GetBans = function(...) local results = {getBans(...)} if results[1] == false then return end return unpack(results) end,
	SetBanAdmin = setBanAdmin,
	SetBanReason = setBanReason,
	KickPlayer = kickPlayer,
	SetBanNick = setBanNick,
	ReloadBans = reloadBans,
	RemoveBan = removeBan,
	GetGameType = function(...) local results = {getGameType(...)} if results[1] == false then return end return unpack(results) end,
	RemoveRuleValue = removeRuleValue,
	SetUnbanTime = setUnbanTime,
	GetMapName = function(...) local results = {getMapName(...)} if results[1] == false then return end return unpack(results) end,
	PlaySoundFrontEnd = playSoundFrontEnd,
	GetRuleValue = function(...) local results = {getRuleValue(...)} if results[1] == false then return end return unpack(results) end,
	SetMapName = setMapName,
	SetRuleValue = setRuleValue,
	SetGameType = setGameType,
	CreateBlip = function(...) local results = {createBlip(...)} if results[1] == false then return end return unpack(results) end,
	CreateBlipAttachedTo = function(...) local results = {createBlipAttachedTo(...)} if results[1] == false then return end return unpack(results) end,
	GetAccountSerial = function(...) local results = {getAccountSerial(...)} if results[1] == false then return end return unpack(results) end,
	IsGuestAccount = isGuestAccount,
	GetCameraInterior = function(...) local results = {getCameraInterior(...)} if results[1] == false then return end return unpack(results) end,
	GetCameraMatrix = function(...) return System.tuple(getCameraMatrix(...)) end,
	FadeCamera = fadeCamera,
	SetCameraInterior = setCameraInterior,
	GetCameraTarget = function(...) local results = {getCameraTarget(...)} if results[1] == false then return end return unpack(results) end,
	SetCameraMatrix = setCameraMatrix,
	SetCameraTarget = setCameraTarget,
	IsCursorShowing = isCursorShowing,
	ShowCursor = showCursor,
	ClearElementVisibleTo = clearElementVisibleTo,
	CloneElement = function(...) local results = {cloneElement(...)} if results[1] == false then return end return unpack(results) end,
	GetAllElementData = function(...) local results = {getAllElementData(...)} if results[1] == false then return end return unpack(results) end,
	BanPlayer = function(...) local results = {banPlayer(...)} if results[1] == false then return end return unpack(results) end,
	AddBan = function(...) local results = {addBan(...)} if results[1] == false then return end return unpack(results) end,
	GetElementByIndex = function(...) local results = {getElementByIndex(...)} if results[1] == false then return end return unpack(results) end,
	GetElementSyncer = function(...) local results = {getElementSyncer(...)} if results[1] == false then return end return unpack(results) end,
	GetElementZoneName = function(...) local results = {getElementZoneName(...)} if results[1] == false then return end return unpack(results) end,
	GetElementsByType = function(...) local results = {getElementsByType(...)} if results[1] == false then return end return unpack(results) end,
	IsElementVisibleTo = isElementVisibleTo,
	RemoveElementData = removeElementData,
	SetElementVisibleTo = setElementVisibleTo,
	SetElementSyncer = setElementSyncer,
	CancelEvent = cancelEvent,
	CancelLatentEvent = cancelLatentEvent,
	GetLatentEventHandles = function(...) local results = {getLatentEventHandles(...)} if results[1] == false then return end return unpack(results) end,
	GetCancelReason = function(...) local results = {getCancelReason(...)} if results[1] == false then return end return unpack(results) end,
	CreateExplosion = createExplosion,
	GetLatentEventStatus = function(...) local results = {getLatentEventStatus(...)} if results[1] == false then return end return unpack(results) end,
	TriggerClientEvent = triggerClientEvent,
	TriggerLatentClientEvent = triggerLatentClientEvent,
	BindKey = bindKey,
	AddCommandHandler = addCommandHandler,
	GetControlState = getControlState,
	GetFunctionsBoundToKey = function(...) local results = {getFunctionsBoundToKey(...)} if results[1] == false then return end return unpack(results) end,
	ExecuteCommandHandler = executeCommandHandler,
	GetKeyBoundToFunction = function(...) local results = {getKeyBoundToFunction(...)} if results[1] == false then return end return unpack(results) end,
	IsControlEnabled = isControlEnabled,
	IsKeyBound = isKeyBound,
	ToggleControl = toggleControl,
	ToggleAllControls = toggleAllControls,
	UnbindKey = unbindKey,
	LoadMapData = function(...) local results = {loadMapData(...)} if results[1] == false then return end return unpack(results) end,
	SaveMapData = saveMapData,
	ResetMapInfo = resetMapInfo,
	CreateMarker = function(...) local results = {createMarker(...)} if results[1] == false then return end return unpack(results) end,
	GetLoadedModules = function(...) local results = {getLoadedModules(...)} if results[1] == false then return end return unpack(results) end,
	OutputChatBox = outputChatBox,
	GetModuleInfo = function(...) local results = {getModuleInfo(...)} if results[1] == false then return end return unpack(results) end,
	OutputConsole = outputConsole,
	ClearChatBox = clearChatBox,
	OutputServerLog = outputServerLog,
	ShowChat = showChat,
	CreatePed = function(...) local results = {createPed(...)} if results[1] == false then return end return unpack(results) end,
	GetPedGravity = function(...) local results = {getPedGravity(...)} if results[1] == false then return end return unpack(results) end,
	ReloadPedWeapon = reloadPedWeapon,
	SetPedArmor = setPedArmor,
	SetPedChoking = setPedChoking,
	SetPedFightingStyle = setPedFightingStyle,
	SetPedGravity = setPedGravity,
	SetPedWearingJetpack = setPedWearingJetpack,
	GetPickupRespawnInterval = function(...) local results = {getPickupRespawnInterval(...)} if results[1] == false then return end return unpack(results) end,
	IsPickupSpawned = isPickupSpawned,
	SetPickupRespawnInterval = setPickupRespawnInterval,
	ForcePlayerMap = forcePlayerMap,
	GetAlivePlayers = function(...) local results = {getAlivePlayers(...)} if results[1] == false then return end return unpack(results) end,
	GetDeadPlayers = function(...) local results = {getDeadPlayers(...)} if results[1] == false then return end return unpack(results) end,
	GetPlayerAnnounceValue = function(...) local results = {getPlayerAnnounceValue(...)} if results[1] == false then return end return unpack(results) end,
	GetPlayerBlurLevel = function(...) local results = {getPlayerBlurLevel(...)} if results[1] == false then return end return unpack(results) end,
	GetPlayerCount = function(...) local results = {getPlayerCount(...)} if results[1] == false then return end return unpack(results) end,
	GetPlayerACInfo = function(...) local results = {getPlayerACInfo(...)} if results[1] == false then return end return unpack(results) end,
	GetPlayerIdleTime = function(...) local results = {getPlayerIdleTime(...)} if results[1] == false then return end return unpack(results) end,
	GetPlayerIP = function(...) local results = {getPlayerIP(...)} if results[1] == false then return end return unpack(results) end,
	GetPlayerMoney = function(...) local results = {getPlayerMoney(...)} if results[1] == false then return end return unpack(results) end,
	GetPlayerSerial = function(...) local results = {getPlayerSerial(...)} if results[1] == false then return end return unpack(results) end,
	GetPlayerVersion = function(...) local results = {getPlayerVersion(...)} if results[1] == false then return end return unpack(results) end,
	GetRandomPlayer = function(...) local results = {getRandomPlayer(...)} if results[1] == false then return end return unpack(results) end,
	GetPlayerWantedLevel = function(...) local results = {getPlayerWantedLevel(...)} if results[1] == false then return end return unpack(results) end,
	GivePlayerMoney = givePlayerMoney,
	IsPlayerMapForced = isPlayerMapForced,
	IsPlayerMuted = isPlayerMuted,
	RedirectPlayer = redirectPlayer,
	SetPlayerMoney = setPlayerMoney,
	ResendPlayerModInfo = resendPlayerModInfo,
	SetPlayerHudComponentVisible = setPlayerHudComponentVisible,
	ResendPlayerACInfo = resendPlayerACInfo,
	SetPlayerBlurLevel = setPlayerBlurLevel,
	SetPlayerName = setPlayerName,
	SetPlayerAnnounceValue = setPlayerAnnounceValue,
	SetPlayerMuted = setPlayerMuted,
	SetPlayerTeam = setPlayerTeam,
	SetPlayerVoiceIgnoreFrom = setPlayerVoiceIgnoreFrom,
	SetPlayerVoiceBroadcastTo = setPlayerVoiceBroadcastTo,
	TakePlayerMoney = takePlayerMoney,
	DetonateSatchels = detonateSatchels,
	SetPlayerWantedLevel = setPlayerWantedLevel,
	SpawnPlayer = spawnPlayer,
	TakePlayerScreenShot = takePlayerScreenShot,
	AddResourceConfig = function(...) local results = {addResourceConfig(...)} if results[1] == false then return end return unpack(results) end,
	AddResourceMap = function(...) local results = {addResourceMap(...)} if results[1] == false then return end return unpack(results) end,
	CreateResource = function(...) local results = {createResource(...)} if results[1] == false then return end return unpack(results) end,
	CallRemote = callRemote,
	GetResourceACLRequests = function(...) local results = {getResourceACLRequests(...)} if results[1] == false then return end return unpack(results) end,
	DeleteResource = deleteResource,
	GetResourceLastStartTime = function(...) local results = {getResourceLastStartTime(...)} if results[1] == false then return end return unpack(results) end,
	CopyResource = function(...) local results = {copyResource(...)} if results[1] == false then return end return unpack(results) end,
	GetResourceLoadFailureReason = function(...) local results = {getResourceLoadFailureReason(...)} if results[1] == false then return end return unpack(results) end,
	GetResources = function(...) local results = {getResources(...)} if results[1] == false then return end return unpack(results) end,
	GetResourceInfo = function(...) local results = {getResourceInfo(...)} if results[1] == false then return end return unpack(results) end,
	GetResourceMapRootElement = function(...) local results = {getResourceMapRootElement(...)} if results[1] == false then return end return unpack(results) end,
	GetResourceLoadTime = function(...) local results = {getResourceLoadTime(...)} if results[1] == false then return end return unpack(results) end,
	GetResourceOrganizationalPath = function(...) local results = {getResourceOrganizationalPath(...)} if results[1] == false then return end return unpack(results) end,
	RefreshResources = refreshResources,
	IsResourceArchived = isResourceArchived,
	StartResource = startResource,
	UpdateResourceACLRequest = updateResourceACLRequest,
	SetResourceInfo = setResourceInfo,
	RenameResource = renameResource,
	GetMaxPlayers = function(...) local results = {getMaxPlayers(...)} if results[1] == false then return end return unpack(results) end,
	RemoveResourceFile = removeResourceFile,
	GetServerHttpPort = function(...) local results = {getServerHttpPort(...)} if results[1] == false then return end return unpack(results) end,
	GetServerPassword = function(...) local results = {getServerPassword(...)} if results[1] == false then return end return unpack(results) end,
	StopResource = stopResource,
	RestartResource = restartResource,
	GetServerPort = function(...) local results = {getServerPort(...)} if results[1] == false then return end return unpack(results) end,
	IsGlitchEnabled = isGlitchEnabled,
	GetServerName = function(...) local results = {getServerName(...)} if results[1] == false then return end return unpack(results) end,
	Shutdown = shutdown,
	SetServerPassword = setServerPassword,
	ExecuteSQLQuery = function(...) local results = {executeSQLQuery(...)} if results[1] == false then return end return unpack(results) end,
	SetGlitchEnabled = setGlitchEnabled,
	Set = set,
	SetMaxPlayers = setMaxPlayers,
	Get = function(...) local results = {get(...)} if results[1] == false then return end return unpack(results) end,
	DbPrepareString = function(...) local results = {dbPrepareString(...)} if results[1] == false then return end return unpack(results) end,
	DbFree = dbFree,
	DbConnect = function(...) local results = {dbConnect(...)} if results[1] == false then return end return unpack(results) end,
	DbExec = dbExec,
	DbPoll = function(...) local results = {dbPoll(...)} if results[1] == false then return end return unpack(results) end,
	DbQuery = function(...) local results = {dbQuery(...)} if results[1] == false then return end return unpack(results) end,
	CreateTeam = function(...) local results = {createTeam(...)} if results[1] == false then return end return unpack(results) end,
	SetTeamColor = setTeamColor,
	TextCreateDisplay = function(...) local results = {textCreateDisplay(...)} if results[1] == false then return end return unpack(results) end,
	SetTeamFriendlyFire = setTeamFriendlyFire,
	SetTeamName = setTeamName,
	TextCreateTextItem = function(...) local results = {textCreateTextItem(...)} if results[1] == false then return end return unpack(results) end,
	TextDestroyDisplay = textDestroyDisplay,
	TextDestroyTextItem = function(...) local results = {textDestroyTextItem(...)} if results[1] == false then return end return unpack(results) end,
	TextDisplayAddText = function(...) local results = {textDisplayAddText(...)} if results[1] == false then return end return unpack(results) end,
	TextDisplayAddObserver = function(...) local results = {textDisplayAddObserver(...)} if results[1] == false then return end return unpack(results) end,
	TextDisplayGetObservers = function(...) local results = {textDisplayGetObservers(...)} if results[1] == false then return end return unpack(results) end,
	TextDisplayRemoveText = function(...) local results = {textDisplayRemoveText(...)} if results[1] == false then return end return unpack(results) end,
	TextDisplayRemoveObserver = textDisplayRemoveObserver,
	TextDisplayIsObserver = textDisplayIsObserver,
	TextItemGetColor = function(...) return System.tuple(textItemGetColor(...)) end,
	TextItemGetPosition = function(...) return System.tuple(textItemGetPosition(...)) end,
	TextItemGetPriority = function(...) local results = {textItemGetPriority(...)} if results[1] == false then return end return unpack(results) end,
	TextItemGetText = function(...) local results = {textItemGetText(...)} if results[1] == false then return end return unpack(results) end,
	TextItemGetScale = function(...) local results = {textItemGetScale(...)} if results[1] == false then return end return unpack(results) end,
	TextItemSetColor = textItemSetColor,
	TextItemSetPosition = textItemSetPosition,
	TextItemSetPriority = function(...) local results = {textItemSetPriority(...)} if results[1] == false then return end return unpack(results) end,
	TextItemSetScale = textItemSetScale,
	TextItemSetText = function(...) local results = {textItemSetText(...)} if results[1] == false then return end return unpack(results) end,
	GetNetworkStats = function(...) local results = {getNetworkStats(...)} if results[1] == false then return end return unpack(results) end,
	GetServerConfigSetting = function(...) local results = {getServerConfigSetting(...)} if results[1] == false then return end return unpack(results) end,
	SetServerConfigSetting = setServerConfigSetting,
	AddVehicleSirens = addVehicleSirens,
	BlowVehicle = blowVehicle,
	GetModelHandling = function(...) local results = {getModelHandling(...)} if results[1] == false then return end return unpack(results) end,
	GetVehicleRespawnPosition = function(...) return System.tuple(getVehicleRespawnPosition(...)) end,
	GetVehicleRespawnRotation = function(...) return System.tuple(getVehicleRespawnRotation(...)) end,
	GetVehiclesOfType = function(...) local results = {getVehiclesOfType(...)} if results[1] == false then return end return unpack(results) end,
	ResetVehicleExplosionTime = resetVehicleExplosionTime,
	RemoveVehicleSirens = removeVehicleSirens,
	RespawnVehicle = respawnVehicle,
	ResetVehicleIdleTime = resetVehicleIdleTime,
	SetModelHandling = setModelHandling,
	SetVehicleIdleRespawnDelay = setVehicleIdleRespawnDelay,
	SetVehicleRespawnDelay = setVehicleRespawnDelay,
	SetVehicleRespawnPosition = setVehicleRespawnPosition,
	SetVehicleRespawnRotation = setVehicleRespawnRotation,
	SetVehicleVariant = setVehicleVariant,
	ToggleVehicleRespawn = toggleVehicleRespawn,
	SpawnVehicle = spawnVehicle,
	GiveWeapon = giveWeapon,
	TakeWeapon = takeWeapon,
	TakeAllWeapons = takeAllWeapons,
	GetJetpackWeaponEnabled = getJetpackWeaponEnabled,
	SetJetpackWeaponEnabled = setJetpackWeaponEnabled,
})
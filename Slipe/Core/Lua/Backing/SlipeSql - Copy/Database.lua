-- Generated by CSharp.lua Compiler

local DictStringString
local ArrayDictStringString

System.import(function (out)
  DictStringString = System.Dictionary(System.String, System.String)
  ArrayDictStringString = System.Array(DictStringString)
end)

local System = System
System.namespace("Slipe.Sql", function (namespace)
  namespace.class("Database", function (namespace)
    local Exec, Query, __ctor1__, __ctor2__, __ctor3__

    local function getOptionString(options)
      
      local optionString = ""

      if (options:getShare() ~= nil) then
        optionString = optionString .. "share=" .. (options:getShare() and 1 or 0) .. ";"
      end

      if (options:getBatch() ~= nil) then
        optionString = optionString .. "batch=" .. (options:getBatch() and 1 or 0) .. ";"
      end

      if (options:getAutoReconnect() ~= nil) then
        optionString = optionString .. "autoreconnect=" .. (options:getAutoReconnect() and 1 or 0) .. ";"
      end

      if (options:getLog() ~= nil) then
        optionString = optionString .. "log=" .. (options:getLog() and 1 or 0) .. ";"
      end

      if (options:getMulti_statements() ~= nil) then
        optionString = optionString .. "multi_statements=" .. (options:getMulti_statements() and 1 or 0) .. ";"
      end

      if (options:getTag() ~= nil) then
        optionString = optionString .. "tag=" .. options:getTag() .. ";"
      end
      
      if (options:getSurpress() ~= nil) then
        local surpress = "surpress="
        for _, value in System.each(option.getSurpress()) do
          optionString = surpress .. value .. ","
        end
        if (surpress:len() > 0) then
          surpress = surpress:sub(0, surpress:len() - 1)
        end
        optionString = optionString .. surpress .. ";"
      end
      
      if (optionString == "") then
        return optionString
      end
      return optionString:sub(0, optionString:len() - 1)
    end

    local function getConnectionString(connectionStringInstance)
      local connectionString = ""

      if (connectionStringInstance:getDbName() ~= nil) then
        optionString = optionString .. "dbname=" .. options:getDbName() .. ";"
      end
      if (connectionStringInstance:getHost() ~= nil) then
        optionString = optionString .. "host=" .. options:getHost() .. ";"
      end
      if (connectionStringInstance:getPort() ~= nil) then
        optionString = optionString .. "port=" .. options:getPort() .. ";"
      end
      if (connectionStringInstance:getUnix_socket() ~= nil) then
        optionString = optionString .. "unix_socket=" .. options:getUnix_socket() .. ";"
      end
      if (connectionStringInstance:getCharset() ~= nil) then
        optionString = optionString .. "charset=" .. options:getCharset() .. ";"
      end


      if (connectionString == "") then
        return connectionString
      end
      return connectionString:sub(0, connectionString:len() - 1)
    end

    local function createResultSet(queryHandle)
      local results = dbPoll(queryHandle, 0)
      local dictionaryArray = ArrayDictStringString:new(1)

      for i, row in ipairs(results) do 
        local dictionary = DictStringString()

        for key, value in pairs(row) do
          dictionary:set(key, value)
        end

        dictionaryArray:set(i - 1, dictionary)
      end

      return dictionaryArray
    end

    -- <summary>
    -- Creatse a connection with a sqlite daTabase
    -- </summary>
    __ctor1__ = function (this, filepath, options)
      this.database = dbConnect(filepath, getOptionString(options))
    end

    -- <summary>
    -- Creates a connection with a MySql server
    -- </summary>
    __ctor2__ = function (this, connectionString, username, password, options)
      this.database = dbConnect(connectionString, username, password, getOptionString(options))
    end

    -- <summary>
    -- Creates a connection with a MySql server
    -- </summary>
    __ctor3__ = function (this, connectionString, username, password, options)
      this.database = dbConnect(getConnectionString(connectionString), username, password, getOptionString(options))
    end

    -- <summary>
    -- Runs an SQL query discarding the results
    -- </summary>
    -- <param name="parameters">parameters for the SQL query</param>
    Exec = function (this, query, parameters)
      local params = {}
      for _, value in System.each(parameters) do
        params[#params + 1] = value
      end
      dbExec(this.database, query, unpack(params))
    end

    -- <summary>
    -- Runs an SQL query and resturns the results asynchronously
    -- </summary>
    -- <param name="parameters">parameters for the SQL query</param>
    -- <returns>An array of dictionaries representing the resulting rows of the query</returns>
    Query = function (this, query, parameters)
      local params = {}
      for _, value in System.each(parameters) do
        params[#params + 1] = value
      end

      local task, callback = System.Task.Callback(createResultSet)
      dbExec(callback, this.database, query, unpack(params))

      return task;
    end
    return {
      Exec = Exec,
      Query = Query,
      __ctor__ = {
        __ctor1__,
        __ctor2__,
        __ctor3__
      }
    }
  end)
end)

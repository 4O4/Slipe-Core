-- Generated by CSharp.lua Compiler
local System = System
local SystemNumerics = System.Numerics
local MTAServerWrapper
local MTASharedWrapper
local ListVehicle
local DictStringVehicle
System.import(function (out)
  MTAServerWrapper = out.MTAServerWrapper
  MTASharedWrapper = out.MTASharedWrapper
  ListVehicle = System.List(MTAServerWrapper.Vehicle)
  DictStringVehicle = System.Dictionary(System.String, MTAServerWrapper.Vehicle)
end)
System.namespace("MTAServerResource", function (namespace)
  namespace.class("Program", function (namespace)
    local Main, class, __ctor__
    __ctor__ = function (this)
      local vehicles = ListVehicle()
      for i = 0, 9 do
        local rhino = MTAServerWrapper.Vehicle(432 --[[VehicleModel.RHINO]], SystemNumerics.Vector3(i * 15, 0, 3))
        vehicles:Add(rhino)
      end
      vehicles:get(5):setRotation(SystemNumerics.Vector3(0, 0, 45))

      local dildo = MTAServerWrapper.MTAObject(321, SystemNumerics.Vector3(3, 3, 3))
      dildo:setScale(SystemNumerics.Vector3(3, 3, 3))
      dildo:Move1(5000, SystemNumerics.Vector3(3, 3, 10))

      vehicles:get(4):AttachTo1(dildo, SystemNumerics.Vector3(0, 0, 3))

      local vehicleDictionary = DictStringVehicle()
      vehicleDictionary:set("best", vehicles:get(3))
      vehicleDictionary:get("best"):setPosition(SystemNumerics.Vector3(0, 0, 20))
      vehicleDictionary:get("best"):setFrozen(true)

      for _, vehicle in System.each(MTAServerWrapper.ElementHelper.GetByType(MTAServerWrapper.Vehicle)) do
        vehicle:setRotation(SystemNumerics.Vector3(0, 0, 90))
      end


      local alpha = MTAServerWrapper.Vehicle(602 --[[VehicleModel.ALPHA]], SystemNumerics.Vector3(0, 10, 3))

      MTASharedWrapper.Element.getRoot():AddEventHandler("onVehicleDamage", true, "normal")

      -- alpha.AddEventHandler("onVehicleDamage");
      alpha.OnDamage = alpha.OnDamage + function (loss)
        System.Console.WriteLine("Vehicle lost " .. loss .. " health")
      end

      -- Console.WriteLine(File.ReadAllText("meta.xml"));
    end
    Main = function (args)
      local q = SystemNumerics.Quaternion(12, 41, 42, 10)
      local p = SystemNumerics.Quaternion(SystemNumerics.Vector3(10, 20, 4), 6)
      System.Console.WriteLine(q:GetHashCode())
      System.Console.WriteLine((SystemNumerics.Quaternion.op_Multiply(q, p)):ToString())
      local c = SystemNumerics.Complex.Zero:__clone__()
      System.Console.WriteLine(c:getImaginary())
      local v3 = SystemNumerics.Vector4(5)
      local v4 = SystemNumerics.Vector4(3)
      local result = SystemNumerics.Vector4.op_Multiply(v3, 2)
      local result2 = SystemNumerics.Vector4.op_Multiply(4, v4)
      local v1 = SystemNumerics.Vector3(4, 5, 6)
      local p1 = SystemNumerics.Plane(v4)
      local p2 = SystemNumerics.Plane(v1, 39)
      System.Console.WriteLine(p2:ToString())
      System.Console.WriteLine(result2.X)
      System.Console.WriteLine(v3:Length())
      local asdf = "asdf"
      System.Console.WriteLineChar(asdf:get(2))
      -- will print d ?
      class()
    end
    class = {
      Main = Main,
      __ctor__ = __ctor__
    }
    return class
  end)
end)

-- Generated by CSharp.lua Compiler
local System = System
local MultiTheftAuto = MultiTheftAuto
local MTASharedWrapper
local DictObjectElement
System.import(function (out)
  MTASharedWrapper = out.MTASharedWrapper
  DictObjectElement = System.Dictionary(System.Object, MTASharedWrapper.Element)
end)
System.namespace("MTASharedWrapper", function (namespace)
  namespace.class("ElementManager", function (namespace)
    local instance, getInstance, getRoot, RegisterElement, GetElement, AddEventHandler, HandleEvent, class, 
    __ctor__
    __ctor__ = function (this)
      instance = this
      this.elements = DictObjectElement()
      this.root = System.new(MTASharedWrapper.Element, 2, MultiTheftAuto.Shared.GetRootElement())
    end
    getInstance = function ()
      return instance or class()
    end
    getRoot = function (this)
      return this.root
    end
    RegisterElement = function (this, element)
      this.elements:Add(element:getMTAElement(), element)
    end
    GetElement = function (this, element)
      if not this.elements:ContainsKey(element) then
        --TODO: Create new element of correct type
        return nil
      end
      return this.elements:get(element)
    end
    AddEventHandler = function (this, element, eventName, propagated, priorty)
      MultiTheftAuto.Shared.AddEventHandler(eventName, element:getMTAElement(), "MTASharedWrapper.ElementManager.HandleEvent", propagated, priorty)
    end
    HandleEvent = function (eventString, source, p1, p2, p3, p4, p5, p6, p7, p8)
      local element = GetElement(getInstance(), source)
      if element == nil then
        -- if the resource is not aware of the referenced element's existance have the root element handle it instead
        -- this is particularly useful for playerJoin, since the player element will not exist before that yet
        MTASharedWrapper.Element.getRoot():HandleEvent(eventString, source, p1, p2, p3, p4, p5, p6, p7, p8)
        return
      end
      element:HandleEvent(eventString, source, p1, p2, p3, p4, p5, p6, p7, p8)
    end
    class = {
      getInstance = getInstance,
      getRoot = getRoot,
      RegisterElement = RegisterElement,
      GetElement = GetElement,
      AddEventHandler = AddEventHandler,
      HandleEvent = HandleEvent,
      __ctor__ = __ctor__
    }
    return class
  end)
end)
